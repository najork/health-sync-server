// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"net/http"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-server/httpserver"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-server/v2/witchcraft/wresource"
	"github.com/palantir/witchcraft-go-server/v2/wrouter"
)

type HealthSyncService interface {
	// Collect metrics from Garmin Connect for the given activity.
	Collect(ctx context.Context, requestArg ActivityRequest) error
}

// RegisterRoutesHealthSyncService registers handlers for the HealthSyncService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesHealthSyncService(router wrouter.Router, impl HealthSyncService) error {
	handler := healthSyncServiceHandler{impl: impl}
	resource := wresource.New("healthsyncservice", router)
	if err := resource.Post("Collect", "/api/collect", httpserver.NewJSONHandler(handler.HandleCollect, httpserver.StatusCodeMapper, httpserver.ErrHandler)); err != nil {
		return werror.Wrap(err, "failed to add route", werror.SafeParam("routeName", "Collect"))
	}
	return nil
}

type healthSyncServiceHandler struct {
	impl HealthSyncService
}

func (h *healthSyncServiceHandler) HandleCollect(rw http.ResponseWriter, req *http.Request) error {
	var request ActivityRequest
	if err := codecs.JSON.Decode(req.Body, &request); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return h.impl.Collect(req.Context(), request)
}
